import React, {useEffect, useState} from 'react';
import {ActivityIndicator, Image, Platform, StyleSheet, Text, TouchableOpacity, Alert} from 'react-native';
import * as Google from 'expo-auth-session/providers/google';
import axios from 'axios';
import {login} from "@/i18n/login";
import * as AuthSession from 'expo-auth-session';

interface GoogleAuthButtonProps {
    onToken: (token: string) => void;
    isLoading?: boolean;
}

export default function GoogleAuthButton({ onToken, isLoading = false }: GoogleAuthButtonProps) {
    const [loading, setLoading] = useState(false);
    const redirectUri = AuthSession.makeRedirectUri();

    console.log("üîó GoogleAuthButton —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
    console.log("üîó onToken function:", typeof onToken);
    console.log("üîó Redirect URI:", redirectUri, "Platform:", Platform.OS);

    const [request, response, promptAsync] = Google.useAuthRequest({
        iosClientId: process.env.EXPO_PUBLIC_IOS_CLIENT_ID,
        androidClientId: process.env.EXPO_PUBLIC_ANDROID_CLIENT_ID,
        webClientId: process.env.EXPO_PUBLIC_WEB_CLIENT_ID,
        scopes: ['profile', 'email'],
        redirectUri: redirectUri
    });

    useEffect(() => {
        console.log("üîç Request redirect URI:", request?.redirectUri, "Platform:", Platform.OS);
        
        if (response?.type === 'success') {
            console.log("‚úÖ Google Auth response success, –æ–±—Ä–æ–±–ª—è—î–º–æ...");
            handleAuthSuccess(response);
        } else if (response?.type === 'error') {
            console.error("‚ùå Google Auth Error:", response.error);
            setLoading(false);
            Alert.alert(
                '–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó',
                '–ù–µ –≤–¥–∞–ª–æ—Å—è –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è —á–µ—Ä–µ–∑ Google. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.',
                [{ text: 'OK' }]
            );
        } else if (response?.type === 'cancel') {
            console.log("üö´ Google Auth —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º");
            setLoading(false);
        }
    }, [response]);

    const handleAuthSuccess = async (authResponse: any) => {
        try {
            console.log("üîÑ handleAuthSuccess –ø–æ—á–∞—Ç–æ");
            const { authentication } = authResponse;

            if (!authentication?.accessToken) {
                throw new Error('Access token –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥ Google');
            }

            console.log("‚úÖ Google Auth Success, –æ—Ç—Ä–∏–º–∞–Ω–æ Access Token");

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ access token –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä
            const apiUrl = `http://127.0.0.48/api/social/callback/ggl-json/${authentication.accessToken}`;
            console.log(`üöÄ FS Request: ${apiUrl}`);

            const response = await axios.get(apiUrl, {
                timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥ timeout
            });

            if (response.data && response.data.data) {
                const token = response.data.data;
                console.log("üéâ JWT Token –æ—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞:", token);
                
                // –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
                console.log("üéØ –í–∏–∫–ª–∏–∫–∞—î–º–æ onToken –∑ JWT —Ç–æ–∫–µ–Ω–æ–º");
                console.log("üéØ onToken function –ø–µ—Ä–µ–¥ –≤–∏–∫–ª–∏–∫–æ–º:", typeof onToken);
                
                if (typeof onToken === 'function') {
                    console.log("‚úÖ onToken —î —Ñ—É–Ω–∫—Ü—ñ—î—é, –≤–∏–∫–ª–∏–∫–∞—î–º–æ...");
                    onToken(token);
                    console.log("‚úÖ onToken –≤–∏–∫–ª–∏–∫–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!");
                } else {
                    console.error("‚ùå onToken –Ω–µ —î —Ñ—É–Ω–∫—Ü—ñ—î—é:", typeof onToken);
                }
            } else {
                throw new Error('–ù–µ–≤–∞–ª—ñ–¥–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞');
            }
        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ Google Auth:", error);
            
            let errorMessage = '–ù–µ –≤–¥–∞–ª–æ—Å—è –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä';
            
            if (error.code === 'ECONNABORTED') {
                errorMessage = '–¢–∞–π–º-–∞—É—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞';
            } else if (error.response?.status === 404) {
                errorMessage = '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (404)';
            } else if (error.response?.status >= 500) {
                errorMessage = '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
            }

            Alert.alert('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó', errorMessage, [{ text: 'OK' }]);
        } finally {
            setLoading(false);
        }
    };

    const handlePress = async () => {
        try {
            setLoading(true);
            console.log("üîÑ –ó–∞–ø—É—Å–∫ Google Auth...");
            await promptAsync();
        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Google Auth:", error);
            setLoading(false);
            Alert.alert(
                '–ü–æ–º–∏–ª–∫–∞',
                '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é —á–µ—Ä–µ–∑ Google',
                [{ text: 'OK' }]
            );
        }
    };

    const isButtonDisabled = loading || isLoading || !request;

    return (
        <TouchableOpacity
            style={[
                styles.button, 
                styles.google,
                isButtonDisabled && styles.disabled
            ]}
            onPress={handlePress}
            disabled={isButtonDisabled}
        >
            <Image
                source={require('assets/images/social-media-logos/google_g.png')}
                style={styles.buttonLogo}
            />
            {loading || isLoading ? (
                <ActivityIndicator size="small" color="#666" style={styles.buttonLoader} />
            ) : (
                <Text style={styles.buttonText}>{login.t('login.google')}</Text>
            )}
        </TouchableOpacity>
    );
}

const styles = StyleSheet.create({
    button: {
        width: 260,
        paddingVertical: 7,
        borderRadius: 8,
        marginVertical: 10,
        alignItems: 'center',
        elevation: 3,
        flexDirection: 'row',
        justifyContent: 'flex-start',
    },
    google: {
        backgroundColor: '#ffffff',
        color: '#fff',
    },
    disabled: {
        opacity: 0.6,
    },
    buttonLogo: {
        width: 40,
        height: 40,
        marginLeft: 15,
        marginRight: 15,
    },
    buttonText: {
        fontSize: 16,
        fontWeight: '400',
        alignItems: 'center',
        marginLeft: 0,
        color: '#333',
    },
    buttonLoader: {
        marginLeft: 50,
    },
});
