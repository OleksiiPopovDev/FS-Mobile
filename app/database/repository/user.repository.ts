import {database} from "@/app/database";
import User from "@/app/database/model/users.model";
import * as FileSystem from 'expo-file-system';

export class UserRepository {
    private readonly collection = database.get<User>('users');

    async getAllUsers(): Promise<User[]> {
        try {
            const users = await this.collection.query().fetch();
            console.log(`üìä UserRepository.getAllUsers: –∑–Ω–∞–π–¥–µ–Ω–æ ${users.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`);
            return users;
        } catch (error) {
            console.error('‚ùå UserRepository.getAllUsers error:', error);
            return [];
        }
    }

    async createUser(data: Partial<User>) {
        console.log('üíæ UserRepository.createUser –≤–∏–∫–ª–∏–∫–∞–Ω–æ –∑ –¥–∞–Ω–∏–º–∏:', data);
        try {
            await database.write(async () => {
                await this.collection.create(user => {
                    user._raw.id = String(Date.now());
                    user.userId = data.userId ?? 0;
                    user.token = data.token;
                    user.email = data.email ?? '';
                    user.firstName = data.firstName ?? '';
                    user.lastName = data.lastName ?? '';
                    user.gender = data.gender ?? '';
                    user.birthday = data.birthday ?? '';
                });
            });
            console.log('‚úÖ UserRepository.createUser —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ');
        } catch (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ:', err);
        }
    }

    async clearAll() {
        console.log('üóëÔ∏è UserRepository.clearAll –≤–∏–∫–ª–∏–∫–∞–Ω–æ');
        try {
            await database.write(async () => {
                const allUsers = await this.collection.query().fetch();
                console.log(`üóëÔ∏è –í–∏–¥–∞–ª—è—î–º–æ ${allUsers.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`);
                await Promise.all(allUsers.map(u => u.markAsDeleted()));
            });
            console.log('‚úÖ UserRepository.clearAll —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        } catch (error) {
            console.error('‚ùå UserRepository.clearAll error:', error);
        }
    }

    // –ù–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    async getDatabaseInfo() {
        try {
            const dbPath = `${FileSystem.documentDirectory}SQLite/FitnessServer.db`;
            const info = await FileSystem.getInfoAsync(dbPath);
            
            console.log('üìÅ Database file info:', {
                exists: info.exists,
                size: info.size,
                path: dbPath,
                modificationTime: info.modificationTime
            });

            if (info.exists) {
                const users = await this.getAllUsers();
                console.log('üìä Database —Å–æ–¥–µ—Ä–∂–∏—Ç:', {
                    userCount: users.length,
                    users: users.map(u => ({
                        id: u.id,
                        firstName: u.firstName,
                        lastName: u.lastName,
                        email: u.email
                    }))
                });
            }

            return info;
        } catch (error) {
            console.error('‚ùå getDatabaseInfo error:', error);
            return null;
        }
    }
}
