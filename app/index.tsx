import React, { useState, useEffect } from 'react';
import { ActivityIndicator, View, StyleSheet, Text, TouchableOpacity } from 'react-native';
import Login from "@/app/login";
import Dashboard from "@/app/dashboard";
import { UserRepository } from "@/app/database/repository/user.repository";

// –ü—Ä–æ—Å—Ç–∏–π in-memory storage (–±—É–¥–µ –æ—á–∏—â–∞—Ç–∏—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É)
let savedUserData: any = null;
let savedToken: string | null = null;

export default function App() {
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const [isLoading, setIsLoading] = useState(true);
    const [currentUser, setCurrentUser] = useState(null);

    console.log("üèÅ App –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è –∑ —Å—Ç–∞–Ω–æ–º:", {
        isLoading,
        isAuthenticated,
        hasUser: !!currentUser,
        userName: currentUser?.first_name
    });

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
    useEffect(() => {
        checkSavedUser();
    }, []);

    const checkSavedUser = async () => {
        try {
            console.log("üöÄ checkSavedUser: –ø–æ—á–∞—Ç–æ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏");
            setIsLoading(true);
            
            // –î–æ–¥–∞—î–º–æ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ë–î
            const userRepository = new UserRepository();
            await userRepository.getDatabaseInfo();
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ë–î –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            const dbUsers = await userRepository.getAllUsers();
            console.log("üóÑÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≤ –ë–î:", dbUsers.length);
            
            if (dbUsers.length > 0) {
                const dbUser = dbUsers[0];
                console.log("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î:", dbUser.firstName, dbUser.lastName);
                
                // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –∑ –ë–î —Ñ–æ—Ä–º–∞—Ç—É –≤ –∑–≤–∏—á–∞–π–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
                const userData = {
                    id: dbUser.userId,
                    email: dbUser.email,
                    first_name: dbUser.firstName,
                    last_name: dbUser.lastName,
                    gender: dbUser.gender,
                    birthday: dbUser.birthday,
                    authToken: dbUser.token
                };
                
                setCurrentUser(userData);
                setIsAuthenticated(true);
                console.log("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤—Ö—ñ–¥ –∑ –ë–î –≤–∏–∫–æ–Ω–∞–Ω–æ!");
            } else {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ in-memory storage
                console.log("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –≤ –ø–∞–º'—è—Ç—ñ:", {
                    hasUserData: !!savedUserData,
                    hasToken: !!savedToken
                });
                
                if (savedUserData && savedToken) {
                    console.log("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ø–∞–º'—è—Ç—ñ:", savedUserData.first_name, savedUserData.last_name);
                    
                    setCurrentUser(savedUserData);
                    setIsAuthenticated(true);
                    console.log("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤—Ö—ñ–¥ –∑ –ø–∞–º'—è—Ç—ñ –≤–∏–∫–æ–Ω–∞–Ω–æ!");
                } else {
                    console.log("üîç –ó–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—É—î–º–æ –ª–æ–≥—ñ–Ω");
                    setIsAuthenticated(false);
                }
            }
        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö:", error);
            setIsAuthenticated(false);
        } finally {
            setTimeout(() => {
                setIsLoading(false);
                console.log("‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            }, 1000);
        }
    };

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –ª–æ–≥—ñ–Ω—É
    const handleLoginSuccess = async (userData) => {
        try {
            console.log("üéâüéâüéâ handleLoginSuccess –í–ò–ö–õ–ò–ö–ê–ù–û!");
            console.log("üìù –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", {
                name: userData?.first_name + ' ' + userData?.last_name,
                email: userData?.email,
                id: userData?.id
            });
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
            try {
                const userRepository = new UserRepository();
                await userRepository.clearAll(); // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ
                
                await userRepository.createUser({
                    token: userData.authToken || 'no_token',
                    userId: userData.id ?? 0,
                    email: userData.email,
                    firstName: userData.first_name,
                    lastName: userData.last_name,
                    gender: userData.gender,
                    birthday: userData.birthday,
                });
                
                console.log("üíæ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î");
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∑–±–µ—Ä–µ–≥–ª–æ—Å—è
                await userRepository.getDatabaseInfo();
            } catch (dbError) {
                console.warn("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î:", dbError);
            }
            
            // –¢–∞–∫–æ–∂ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ in-memory storage —è–∫ backup
            savedUserData = userData;
            savedToken = userData.authToken || 'temp_token';
            console.log("üíæ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ø–∞–º'—è—Ç—ñ");
            
            console.log("üîÑ –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω...");
            setCurrentUser(userData);
            setIsAuthenticated(true);
            
            console.log("‚úÖ –°—Ç–∞–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ!");
        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:", error);
            // –í—Å–µ –æ–¥–Ω–æ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –ª–æ–≥—ñ–Ω–æ–º
            setCurrentUser(userData);
            setIsAuthenticated(true);
        }
    };

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏—Ö–æ–¥—É
    const handleLogout = async () => {
        try {
            console.log("üö™ handleLogout –≤–∏–∫–ª–∏–∫–∞–Ω–æ");
            
            // –û—á–∏—â–∞—î–º–æ –ë–î
            try {
                const userRepository = new UserRepository();
                await userRepository.clearAll();
                console.log("üíæ –ë–î –æ—á–∏—â–µ–Ω–æ");
            } catch (dbError) {
                console.warn("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –ë–î:", dbError);
            }
            
            // –û—á–∏—â–∞—î–º–æ in-memory storage
            savedUserData = null;
            savedToken = null;
            console.log("üíæ –ü–∞–º'—è—Ç—å –æ—á–∏—â–µ–Ω–æ");
            
            setCurrentUser(null);
            setIsAuthenticated(false);
            console.log("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–π—à–æ–≤ –∑ —Å–∏—Å—Ç–µ–º–∏");
        } catch (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:", error);
            // –í—Å–µ –æ–¥–Ω–æ –≤–∏—Ö–æ–¥–∏–º–æ
            setCurrentUser(null);
            setIsAuthenticated(false);
        }
    };

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ë–î
    const checkDatabase = async () => {
        const userRepository = new UserRepository();
        await userRepository.getDatabaseInfo();
    };

    // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    if (isLoading) {
        console.log("‚è≥ –ü–æ–∫–∞–∑—É—î–º–æ –µ–∫—Ä–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è");
        return (
            <View style={styles.loadingContainer}>
                <ActivityIndicator size="large" color="#03a9f4" />
                <Text style={styles.loadingText}>–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö...</Text>
                <TouchableOpacity style={styles.debugButton} onPress={checkDatabase}>
                    <Text style={styles.debugButtonText}>üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ë–î</Text>
                </TouchableOpacity>
            </View>
        );
    }

    // –ü–æ–∫–∞–∑—É—î–º–æ Dashboard –∞–±–æ Login –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Å—Ç–∞–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    if (isAuthenticated && currentUser) {
        console.log("‚úÖ –£–º–æ–≤–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞: –ø–æ–∫–∞–∑—É—î–º–æ Dashboard –¥–ª—è", currentUser.first_name);
        return <Dashboard user={currentUser} onLogout={handleLogout} />;
    } else {
        console.log("üîê –ü–æ–∫–∞–∑—É—î–º–æ Login –µ–∫—Ä–∞–Ω");
        console.log("üîß –ü–µ—Ä–µ–¥–∞—î–º–æ handleLoginSuccess:", typeof handleLoginSuccess);
        return <Login onLoginSuccess={handleLoginSuccess} />;
    }
}

const styles = StyleSheet.create({
    loadingContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#1a1a1a',
        paddingHorizontal: 20,
    },
    loadingText: {
        color: '#fff',
        fontSize: 16,
        marginTop: 20,
        textAlign: 'center',
    },
    debugButton: {
        marginTop: 20,
        paddingHorizontal: 15,
        paddingVertical: 10,
        backgroundColor: '#28a745',
        borderRadius: 6,
    },
    debugButtonText: {
        color: '#fff',
        fontSize: 14,
    },
});
